-- Drop existing book_lists table if it exists
drop table if exists book_lists;

-- Create book_lists table
create table book_lists (
  id bigint generated by default as identity primary key,
  user_id uuid references auth.users not null,
  name text not null,
  created_at timestamp with time zone default timezone('utc'::text, now()) not null,
  updated_at timestamp with time zone default timezone('utc'::text, now()) not null,
  unique(user_id, name) -- Ensure list names are unique per user
);

-- Enable RLS on book_lists table
alter table book_lists enable row level security;

-- RLS Policies for book_lists
create policy "Users can view their own book lists"
  on book_lists for select
  using ( auth.uid() = user_id );

create policy "Users can insert their own book lists"
  on book_lists for insert
  with check ( auth.uid() = user_id );

create policy "Users can update their own book lists"
  on book_lists for update
  using ( auth.uid() = user_id );

create policy "Users can delete their own book lists"
  on book_lists for delete
  using ( auth.uid() = user_id );

-- Create e-books table for the ebook reader app
drop table if exists ebooks;

create table ebooks (
  id bigint generated by default as identity primary key,
  user_id uuid references auth.users not null,
  title text not null,
  author text,
  file_type text not null,
  -- NOTE: 'content' and 'raw_content' can be large.
  -- Application should avoid selecting these fields unless explicitly needed.
  content text, -- Stores cleaned/processed content (e.g., Markdown)
  raw_content text, -- Stores the original raw scraped content (e.g., HTML or raw Markdown)
  metadata jsonb not null default '{}'::jsonb,
  last_position jsonb not null default '{"chapter": 0, "scroll": 0}'::jsonb,
  list_id bigint references book_lists(id) on delete set null, -- Link to book_lists, set null if list is deleted
  created_at timestamp with time zone default timezone('utc'::text, now()) not null,
  updated_at timestamp with time zone default timezone('utc'::text, now()) not null,
  unique(user_id, list_id, title) -- Ensure book titles are unique within a list for a user
);

-- Enable RLS on ebooks table
alter table ebooks enable row level security;

-- Create policy to allow users to view their own ebooks
create policy "Users can view their own ebooks"
  on ebooks for select
  using ( auth.uid() = user_id );

-- Create policy to allow users to insert their own ebooks
create policy "Users can insert their own ebooks"
  on ebooks for insert
  with check ( auth.uid() = user_id );

-- Create policy to allow users to update their own ebooks
create policy "Users can update their own ebooks"
  on ebooks for update
  using ( auth.uid() = user_id );

-- Create policy to allow users to delete their own ebooks
create policy "Users can delete their own ebooks"
  on ebooks for delete
  using ( auth.uid() = user_id );

-- Add index for list_id on ebooks table
create index idx_ebooks_user_list on ebooks(user_id, list_id);

-- Add index for user_id and updated_at for efficient sorting of user's recent books
create index idx_ebooks_user_updated_at on ebooks (user_id, updated_at DESC);

-- Create a function to update updated_at column automatically
CREATE OR REPLACE FUNCTION update_updated_at_column()
RETURNS TRIGGER AS $$
BEGIN
    NEW.updated_at = NOW();
    RETURN NEW;
END;
$$ LANGUAGE plpgsql;

-- Trigger for book_lists updated_at
CREATE TRIGGER set_book_lists_updated_at
BEFORE UPDATE ON book_lists
FOR EACH ROW
EXECUTE FUNCTION update_updated_at_column();

-- Trigger for ebooks updated_at
CREATE TRIGGER set_ebooks_updated_at
BEFORE UPDATE ON ebooks
FOR EACH ROW
EXECUTE FUNCTION update_updated_at_column();
