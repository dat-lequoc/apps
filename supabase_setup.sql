-- Drop existing notes table if it exists
drop table if exists notes;

-- Create new notes table with JSON data column
create table notes (
  id bigint generated by default as identity primary key,
  user_id uuid references auth.users not null,
  data jsonb not null,
  created_at timestamp with time zone default timezone('utc'::text, now()) not null
);

-- Set up RLS (Row Level Security)
alter table notes enable row level security;

-- Create policy to allow users to only see their own notes
create policy "Users can only access their own notes"
  on notes for all
  using (auth.uid() = user_id);

-- Create habits table to store JSON data
create table habits (
  id bigint generated by default as identity primary key,
  user_id uuid references auth.users not null,
  data jsonb not null default '{}'::jsonb,
  created_at timestamp with time zone default timezone('utc'::text, now()) not null,
  updated_at timestamp with time zone default timezone('utc'::text, now()) not null,
  unique(user_id)
);

-- Enable RLS
alter table habits enable row level security;

-- Create policies
create policy "Users can view their own habits"
  on habits for select
  using ( auth.uid() = user_id );

create policy "Users can insert their own habits"
  on habits for insert
  with check ( auth.uid() = user_id );

create policy "Users can update their own habits"
  on habits for update
  using ( auth.uid() = user_id );

-- Create reading table to store JSON data
create table reading (
  id bigint generated by default as identity primary key,
  user_id uuid references auth.users not null,
  data jsonb not null default '{}'::jsonb,
  created_at timestamp with time zone default timezone('utc'::text, now()) not null,
  updated_at timestamp with time zone default timezone('utc'::text, now()) not null,
  unique(user_id)
);

-- Enable RLS
alter table reading enable row level security;

-- Create policies
create policy "Users can view their own reading data"
  on reading for select
  using ( auth.uid() = user_id );

create policy "Users can insert their own reading data"
  on reading for insert
  with check ( auth.uid() = user_id );

create policy "Users can update their own reading data"
  on reading for update
  using ( auth.uid() = user_id );