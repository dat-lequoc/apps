-- Drop existing notes table if it exists
drop table if exists notes;

-- Create new notes table with JSON data column
create table notes (
  id bigint generated by default as identity primary key,
  user_id uuid references auth.users not null,
  data jsonb not null,
  created_at timestamp with time zone default timezone('utc'::text, now()) not null
);

-- Set up RLS (Row Level Security)
alter table notes enable row level security;

-- Create policy to allow users to only see their own notes
create policy "Users can only access their own notes"
  on notes for all
  using (auth.uid() = user_id);

-- Create habits table to store JSON data
create table habits (
  id bigint generated by default as identity primary key,
  user_id uuid references auth.users not null,
  data jsonb not null default '{}'::jsonb,
  created_at timestamp with time zone default timezone('utc'::text, now()) not null,
  updated_at timestamp with time zone default timezone('utc'::text, now()) not null,
  unique(user_id)
);

-- Enable RLS
alter table habits enable row level security;

-- Create policies
create policy "Users can view their own habits"
  on habits for select
  using ( auth.uid() = user_id );

create policy "Users can insert their own habits"
  on habits for insert
  with check ( auth.uid() = user_id );

create policy "Users can update their own habits"
  on habits for update
  using ( auth.uid() = user_id );

-- Create reading table to store JSON data
create table reading (
  id bigint generated by default as identity primary key,
  user_id uuid references auth.users not null,
  data jsonb not null default '{}'::jsonb,
  created_at timestamp with time zone default timezone('utc'::text, now()) not null,
  updated_at timestamp with time zone default timezone('utc'::text, now()) not null,
  unique(user_id)
);

-- Enable RLS
alter table reading enable row level security;

-- Create policies
create policy "Users can view their own reading data"
  on reading for select
  using ( auth.uid() = user_id );

create policy "Users can insert their own reading data"
  on reading for insert
  with check ( auth.uid() = user_id );

create policy "Users can update their own reading data"
  on reading for update
  using ( auth.uid() = user_id );

-- Create new user_settings table for storing user Gemini API settings
drop table if exists user_settings;

create table user_settings (
  user_id uuid references auth.users not null primary key,
  api_key text not null,
  model text not null,
  created_at timestamp with time zone default timezone('utc'::text, now()) not null,
  updated_at timestamp with time zone default timezone('utc'::text, now()) not null
);

-- Enable RLS (Row Level Security) for user_settings
alter table user_settings enable row level security;

-- Create policy to allow users to view their own settings
create policy "Users can view their own settings"
  on user_settings for select
  using ( auth.uid() = user_id );

-- Create policy to allow users to insert their own settings
create policy "Users can insert their own settings"
  on user_settings for insert
  with check ( auth.uid() = user_id );

-- Create policy to allow users to update their own settings
create policy "Users can update their own settings"
  on user_settings for update
  using ( auth.uid() = user_id );

-- Create policy to allow users to delete their own settings
create policy "Users can delete their own settings"
  on user_settings for delete
  using ( auth.uid() = user_id );

-- Add flashcards table for the flashcards app

-- Drop the existing flashcards table if it exists
drop table if exists flashcards;

-- Create flashcards table to store flashcard data for the flashcards app
create table flashcards (
  id bigint generated by default as identity primary key,
  user_id uuid references auth.users not null,
  word text not null,
  phrase text not null,
  translation_answer text not null,
  review_count integer not null default 0,
  last_reviewed timestamp with time zone,
  created_at timestamp with time zone default timezone('utc'::text, now()) not null,
  updated_at timestamp with time zone default timezone('utc'::text, now()) not null,
  unique(user_id, word),
  state text,
  due timestamp with time zone,
  stability double precision,
  difficulty double precision,
  elapsed_days double precision,
  scheduled_days double precision,
  reps integer,
  lapses integer,
  ipa text,
  word_audio text,
  phrase_audio text
);

-- Enable RLS on flashcards table
alter table flashcards enable row level security;

-- Create policy to allow users to view their own flashcards
create policy "Users can view their own flashcards"
  on flashcards for select
  using ( auth.uid() = user_id );

-- Create policy to allow users to insert their own flashcards
create policy "Users can insert their own flashcards"
  on flashcards for insert
  with check ( auth.uid() = user_id );

-- Create policy to allow users to update their own flashcards
create policy "Users can update their own flashcards"
  on flashcards for update
  using ( auth.uid() = user_id );

-- Create policy to allow users to delete their own flashcards
create policy "Users can delete their own flashcards"
  on flashcards for delete
  using ( auth.uid() = user_id );

-- Set default values for existing rows
update flashcards
set 
  state = 'New',
  due = now(),
  stability = 0,
  difficulty = 0,
  elapsed_days = 0,
  scheduled_days = 0,
  reps = 0,
  lapses = 0
where state is null;